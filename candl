{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pandas_datareader as pdr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "symbol=pd.read_csv('EQUITY_L.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "symbol.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "symbol=np.array(symbol)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "type(symbol[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "string=symbol[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt\n",
    "x=dt.date.today()\n",
    "\n",
    "y=x-dt.timedelta(120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(symbol.shape)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reverse_hammer(data,i):\n",
    "    \n",
    "    open_close=(data[i][3]-data[i][4])/data[i][3]*100\n",
    "    open_close=abs(open_close)\n",
    "    \n",
    "    low=(data[i][2]-data[i][3])/data[i][2]*100\n",
    "    low=abs(low)\n",
    "    high=(data[i][1]-data[i][4])/data[i][1]*100\n",
    "    high=abs(high)\n",
    "    # print(open_close,\" \",high,\" \",low)\n",
    "    if(open_close*3<high and low*3<high):\n",
    "        #print(data[i][0])\n",
    "        return(1)\n",
    "    return(-1)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hammer(data,i):\n",
    "    \n",
    "    open_close=(data[i][3]-data[i][4])/data[i][3]*100\n",
    "    open_close=abs(open_close)\n",
    "    \n",
    "    low=(data[i][2]-data[i][3])/data[i][2]*100\n",
    "    low=abs(low)\n",
    "    high=(data[i][1]-data[i][4])/data[i][1]*100\n",
    "    high=abs(high)\n",
    "    # print(open_close,\" \",high,\" \",low)\n",
    "    if(open_close*3<low and high*3<low):\n",
    "        #print(data[i][0])\n",
    "        return(1)\n",
    "    return(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def harebozo(data,i):\n",
    "    \n",
    "    open_close=(data[i][3]-data[i][4])/data[i][3]*100\n",
    "    open_close=abs(open_close)\n",
    "    \n",
    "    low=(data[i][2]-data[i][3])/data[i][2]*100\n",
    "    low=abs(low)\n",
    "    high=(data[i][1]-data[i][4])/data[i][1]*100\n",
    "    high=abs(high)\n",
    "    # print(open_close,\" \",high,\" \",low)\n",
    "    high_low=(data[i][1]-data[i][2])/data[i][1]*100\n",
    "    high_low=abs(high_low)\n",
    "    if((open_close>high*4 and open_close>low*4) or (open_close>high*5 and data[i][3]>data[i][1]) or(open_close>low*5 and data[i][4]>data[i][2]) ):\n",
    "        \n",
    "        #print(data[i][0])\n",
    "        return(1)\n",
    "    return(-1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def spin_top(data,i):\n",
    "    \n",
    "    open_close=(data[i][3]-data[i][4])/data[i][3]*100\n",
    "    open_close=abs(open_close)\n",
    "    \n",
    "    low=(data[i][2]-data[i][3])/data[i][2]*100\n",
    "    low=abs(low)\n",
    "    high=(data[i][1]-data[i][4])/data[i][1]*100\n",
    "    high=abs(high)\n",
    "    # print(open_close,\" \",high,\" \",low)\n",
    "    \n",
    "    if(low>5*open_close and high>5*open_close and abs(high-low)<0.5):    \n",
    "        #print(data[i][0])\n",
    "        return(1)\n",
    "    return(-1)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func(data,curr):\n",
    "    temp=curr\n",
    "    dec=0\n",
    "    inc=0\n",
    "    while(curr>temp-5):\n",
    "        if(data[curr][4]<data[curr-1][4]):\n",
    "            dec=dec+1\n",
    "        else:\n",
    "            inc=inc+1\n",
    "        curr=curr-1\n",
    "    return(dec-inc)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_pattern(data,i):\n",
    "     \n",
    "    if(hammer(data,i)==1 or reverse_hammer(data,i)==1 or spin_top(data,i)==1 or harebozo(data,i)==1):\n",
    "         if(func(data,i)>0):\n",
    "             return(1)\n",
    "         else:\n",
    "             return(-1)\n",
    "    return(0)        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_symbol(string,x,y):\n",
    "    try:\n",
    "        df=pdr.get_data_yahoo(string,start=x,end=y)\n",
    "        return df\n",
    "    except:\n",
    "        try:\n",
    "            df=pdr.get_data_yahoo(string+'.BO',start=x,end=y)\n",
    "            return df\n",
    "        except:\n",
    "            try:\n",
    "                df=pdr.get_data_yahoo(string+'.NS',start=x,end=y)\n",
    "                return df\n",
    "            except:\n",
    "                df=pdr.get_data_yahoo('RELIANCE.NS',start=x,end=y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def piv_high(data,temp):\n",
    "    count=0\n",
    "    sum=0\n",
    "    for i in range(temp-1,temp):\n",
    "        sum=sum+data[i][1]\n",
    "        count=count+1\n",
    "    avg=sum/count\n",
    "    return avg\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def piv_close(data,temp):\n",
    "    count=0\n",
    "    sum=0\n",
    "    for i in range(temp-1,temp):\n",
    "        sum=sum+data[i][4]\n",
    "        count=count+1\n",
    "    avg=sum/count\n",
    "    return avg\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def piv_low(data,temp):\n",
    "    count=0\n",
    "    sum=0\n",
    "    for i in range(temp-1,temp):\n",
    "        sum=sum+data[i][2]\n",
    "        count=count+1\n",
    "    avg=sum/count\n",
    "    return avg\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "file=open('suggest.txt','w')\n",
    "file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(symbol)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "file=open('suggest.txt','w')\n",
    "i=0\n",
    "result=[]\n",
    "while(i<len(symbol)-1000):\n",
    "    try:\n",
    "        print(\"Index=\",i)\n",
    "        string=symbol[i][0]\n",
    "        df=get_symbol(string,y,x)\n",
    "        df=df.reset_index()\n",
    "        \n",
    "        print(\"\\n\")\n",
    "        data=np.array(df)\n",
    "        temp=(df.shape)[0]-1\n",
    "        if(temp<4):\n",
    "            i=i+1\n",
    "            continue\n",
    "        check=check_pattern(data,temp-1)\n",
    "        print(\"check=\",check)\n",
    "        print(\"i=\",i)\n",
    "        print(\"check=\",check)\n",
    "        if(check>0):\n",
    "            file.write(\"Company name=\")\n",
    "            file.write(symbol[i][1])\n",
    "            file.write(\"\\n\")\n",
    "            file.write(\"Suggestion=Buy stock\\n\")\n",
    "            file.write(\"Entry price=\")\n",
    "            avg=data[temp-1][1]\n",
    "            avg=avg+(avg*0.005)\n",
    "            file.write(str(round(avg,2)))\n",
    "            high=piv_high(data,temp-1)\n",
    "            low=piv_low(data,temp-1)\n",
    "            close=piv_close(data,temp-1)\n",
    "\n",
    "            pp=(high+low+close)/3\n",
    "            rr1=(2*pp)-low\n",
    "            target1=rr1\n",
    "            rr2=pp+(high-low)\n",
    "            target2=rr2\n",
    "            file.write(\"\\nTarget price 1=\")\n",
    "            file.write(str(round(target1,2)))\n",
    "            file.write(\"\\nTarget price 1=\")\n",
    "            file.write(str(round(target2,2)))\n",
    "          \n",
    "            file.write(\"\\nStop loss=\")\n",
    "            stop_loss=data[temp-1][2]\n",
    "            stop_loss=stop_loss-(stop_loss*0.002)\n",
    "            file.write(str(round(stop_loss,2)))\n",
    "            file.write(\"\\n\\n\")\n",
    "           \n",
    "            print(\"Company name=\",symbol[i][1])\n",
    "            print(\"Suggestion=Buy stock\")\n",
    "            print(\"Entry price=\",avg)\n",
    "            print(\"Target price1=\",target1)\n",
    "            print(\"Target price2=\",target2)\n",
    "            print(\"Stop loss\",stop_loss)\n",
    "            \n",
    "            if(data[temp-1][4]<data[temp][4]):\n",
    "                result.append([symbol[i][1],data[temp-1][0],'bullish','bullish'])\n",
    "            else:\n",
    "                result.append([symbol[i][1],data[temp-1][0],'bullish','bearish'])\n",
    "            i=i+1\n",
    "        elif check<0:\n",
    "            file.write(\"Company name=\")\n",
    "            file.write(symbol[i][1])\n",
    "            file.write(\"\\n\")\n",
    "            file.write(\"Suggestion=Sell stock\\n\")\n",
    "            file.write(\"Entry price=\")\n",
    "            avg=data[temp-1][1]\n",
    "            avg=avg+(avg*0.005)\n",
    "            file.write(str(round(avg,2)))\n",
    "            high=piv_high(data,temp-1)\n",
    "            low=piv_low(data,temp-1)\n",
    "            close=piv_close(data,temp-1)\n",
    "\n",
    "            pp=(high+low+close)/3\n",
    "            rr1=(2*pp)-low\n",
    "            target1=rr1\n",
    "            rr2=pp+(high-low)\n",
    "            target2=rr2\n",
    "            file.write(\"\\nTarget price 1=\")\n",
    "            file.write(str(round(target1,2)))\n",
    "            file.write(\"\\nTarget price 1=\")\n",
    "            file.write(str(round(target2,2)))\n",
    "          \n",
    "            file.write(\"\\nStop loss=\")\n",
    "            stop_loss=data[temp-1][2]\n",
    "            stop_loss=stop_loss-(stop_loss*0.002)\n",
    "            file.write(str(round(stop_loss,2)))\n",
    "            file.write(\"\\n\\n\")\n",
    "           \n",
    "            print(\"Company name=\",symbol[i][1])\n",
    "            print(\"Suggestion=Sell stock\")\n",
    "            print(\"Target price1=\",target1)\n",
    "            print(\"Target price2=\",target2)\n",
    "            print(\"Stop loss\",stop_loss)\n",
    "            \n",
    "            if(data[temp-1][4]<data[temp][4]):\n",
    "                result.append([symbol[i][1],data[temp-1][0],'bearish','bullish'])\n",
    "            else:\n",
    "                result.append([symbol[i][1],data[temp-1][0],'bearish','bearish'])\n",
    "            i=i+1\n",
    "        else:\n",
    "            i=i+1\n",
    "    except:    \n",
    "            \n",
    "        \n",
    "        \n",
    "        i=i+1\n",
    "file.close()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res_df=pd.DataFrame(result,columns=['Date','Company Name','Prediction','Actual'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res_df.to_csv('prediction_res.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "count=0\n",
    "b=0\n",
    "for i in range(len(result)):\n",
    "    if(result[i][2]==result[i][3] and result[i][2]=='bullish'):\n",
    "        count=count+1\n",
    "    elif(result[i][2]==result[i][3] and result[i][2]=='bearish'):\n",
    "        b=b+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "acq=(count+b)/len(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"The accuraccy is=\",round(acq,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.7 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "ad2bdc8ecc057115af97d19610ffacc2b4e99fae6737bb82f5d7fb13d2f2c186"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
